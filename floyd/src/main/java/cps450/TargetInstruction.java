/*
Abraham Steenhoek
CPS 450: Phase 5
4/19/20

TargetInstruction.java

Class: TargetInstruction
    - A target instruction is an intermediary representation of an assembly instruction
    - The code generator provides parameters that are used inside an assembly instruction,
      and the constructor formats it into a valid 32-bit linux assembly instruction
    - Valid instructions include:
        - single-line commands
        - unary and binary operator commands
        - directives
        - labels
        - comments
*/

package cps450;

import java.awt.*;

class TargetInstruction {
    String label;
    String instruction;
    String operand1, operand2;
    String comment;
    String directive;
    static int labelID = 0;

    // text representation of the entire line generated by this class
    String instructionText;

    // used to define labels in the code for jmping
    public TargetInstruction(String label, int labelID) {
        this.label = label;
        instructionText = String.format("$s%d", labelID);
    }
    // .comm x,4,4
    public TargetInstruction(String directive, String varName, int b1, int b2) {
        this.operand1 = "_" + varName;
        this.directive = directive;
        instructionText = String.format("%s %s, %d, %d", directive, varName, b1, b2);
    }

    //NOTE: to write labels correctly you must insert the colon in the label parameter in the emit method
    public TargetInstruction(String label) {
        instructionText = String.format("%s", label);
    }

    public TargetInstruction(String instruction, String operand) {
        this.instruction = instruction;
        this.operand1 = operand;
        instructionText = String.format("%s %s", this.instruction, this.operand1);
    }
    public TargetInstruction(String binaryInstruction, String operand1, String operand2) {
        this.instruction = binaryInstruction;
        this.operand1 = operand1;
        this.operand2 = operand2;
        instructionText = String.format("%s %s, %s", this.instruction, this.operand1, this.operand2);
    }
    public String toString() {
        return instructionText;
    }
}